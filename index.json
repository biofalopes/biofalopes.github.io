[{
    "title": "Managing AWS Autoscaling Groups and Load Balancers using Terraform",
    "date": "",
    "description": "Using Terraform to manage AWS Autoscaling Groups and Load Balancers",
    "body": "This time I\u0026rsquo;ll be using an environment with a Load Balancer and an Autoscaling Group, which is a more complex architecture than the previous one.\nWe\u0026rsquo;ll have the following resources deployed with this procedure:\n1 VPC 2 Subnets 1 Internet Gateway 1 Route Table (with a default route and an association) 2 Security groups 1 Key Pair 1 EC2 Instance 1 Launch Configuration 1 ELB 1 ASG 2 Autoscaling Policies 2 Cloudwatch Metric Alarms It\u0026rsquo;s a very simple and you can build on top of it according to your needs, like the previous infrastructure. The code will be organized in the following structure:\nmain.tf: resource declaration providers.tf: aws provider configuration outputs.tf: output declaration datasources.tf: we\u0026rsquo;ll get the AMI information here userdata.tpl: script to be executed on first boot I\u0026rsquo;ll put the code first and then explain the most important parts. Let\u0026rsquo;s start with providers.tf:\nterraform {\rrequired_providers {\raws = {\rsource = \u0026#34;hashicorp/aws\u0026#34;\rversion = \u0026#34;~\u0026gt; 3.0\u0026#34;\r}\r}\r}\rprovider \u0026#34;aws\u0026#34; {\rshared_credentials_file = \u0026#34;/home/mando/.aws/credentials\u0026#34;\rprofile = \u0026#34;mando\u0026#34;\rregion = \u0026#34;us-east-1\u0026#34;\r} Terraform requires credentials to access your account on AWS. You can choose different approaches for that, like putting the keys directly instad of pointing to a credentials file. Although that works and might even be easier, you\u0026rsquo;ll probably have your code pushed into a git repository which would then expose the keys. More information on how to configure the provider can be found here -\u0026gt; Docs overview | hashicorp/aws.\nNow for the main.tf:\nresource \u0026#34;aws_vpc\u0026#34; \u0026#34;mando_vpc\u0026#34; {\rcidr_block = \u0026#34;10.0.0.0/16\u0026#34;\renable_dns_hostnames = true\rtags = {\rName = \u0026#34;Mando VPC\u0026#34;\r}\r}\rresource \u0026#34;aws_subnet\u0026#34; \u0026#34;mando_public_subnet_us_east_1a\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rcidr_block = \u0026#34;10.10.1.0/24\u0026#34;\ravailability_zone = \u0026#34;us-east-1a\u0026#34;\rtags = {\rName = \u0026#34;Mando Public Subnet US-East 1a\u0026#34;\r}\r}\rresource \u0026#34;aws_subnet\u0026#34; \u0026#34;mando_public_subnet_us_east_1b\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rcidr_block = \u0026#34;10.10.2.0/24\u0026#34;\ravailability_zone = \u0026#34;us-east-1b\u0026#34;\rtags = {\rName = \u0026#34;Mando Public Subnet US-East 1b\u0026#34;\r}\r}\rresource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;mando_vpc_igw\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rtags = {\rName = \u0026#34;Mando VPC - Internet Gateway\u0026#34;\r}\r}\rresource \u0026#34;aws_route_table\u0026#34; \u0026#34;mando_vpc_public\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rroute {\rcidr_block = \u0026#34;0.0.0.0/0\u0026#34;\rgateway_id = aws_internet_gateway.mando_vpc_igw.id\r}\rtags = {\rName = \u0026#34;Public Subnets Route Table for Mando VPC\u0026#34;\r}\r}\rresource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;mando_vpc_us_east_1a_public\u0026#34; {\rsubnet_id = aws_subnet.mando_public_subnet_us_east_1a.id\rroute_table_id = aws_route_table.mando_vpc_public.id\r}\rresource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;mando_vpc_us_east_1b_public\u0026#34; {\rsubnet_id = aws_subnet.mando_public_subnet_us_east_1b.id\rroute_table_id = aws_route_table.mando_vpc_public.id\r}\rresource \u0026#34;aws_security_group\u0026#34; \u0026#34;allow_http\u0026#34; {\rname = \u0026#34;allow_http\u0026#34;\rdescription = \u0026#34;Allow HTTP inbound connections\u0026#34;\rvpc_id = aws_vpc.mando_vpc.id\ringress {\rfrom_port = 80\rto_port = 80\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\regress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\rtags = {\rName = \u0026#34;Allow HTTP Security Group\u0026#34;\r}\r}\rresource \u0026#34;aws_key_pair\u0026#34; \u0026#34;mando_key\u0026#34; {\rkey_name = \u0026#34;mando-key\u0026#34;\rpublic_key = \u0026#34;ssh-rsa AAAABACH3L0Lc2EAAAADAQAPNCDAgQDELie/jIMM8uno12enId2YTmTjK1OGZJtTJFoSPdXIwn79qpZYQ3WXL8PlI/8dqFyGXvQj5bGJbgEydjSYVHFXFhPr4sdKcjguWbu895EjK2DgalcYuC1+6jBbFxiodoObsc+84m81+BACH3L0LQU3cm/rNKufrh6d21jIe4sQVul+WzJ9E8aPk34rPmRPgjYvh1T/P2hdgiUyJmKqOtDYwpokDRad+3W+iwGfoBACH3L0LoCWJ2rYzz6j80FKoiHm9cnSXvErezT7aAdenVzY3nEE4ylnHWVUdmzXN7IbCSLsDV3sdn0+c5E6oDX2/k1VwtSQ8TrUblM7AdpuB4ADniUSYvLqjd/NBIiHODzV6qZxXqoltVTsrTpbCWf1A063PBACH3L0L/F3mxBihWRAKfD1iqqfMXmYvAPosOkJ3u1yuwy/eCi6Q3SmA5n0vBSVKmYdUB9yQdAimWcUqabRzXLz+g8BrUxCBHwOf4+IZAp2AseJeoDQs0aqMwybr/k= mando\u0026#34; # replace with your key\r}\rresource \u0026#34;aws_launch_configuration\u0026#34; \u0026#34;web\u0026#34; {\rname_prefix = \u0026#34;web-\u0026#34;\rimage_id = data.aws_ami.server_ami.id\rinstance_type = \u0026#34;t2.micro\u0026#34;\rkey_name = aws_key_pair.mando_key.id\rsecurity_groups = [aws_security_group.allow_http.id]\rassociate_public_ip_address = true\ruser_data = file(\u0026#34;userdata.tpl\u0026#34;)\rlifecycle {\rcreate_before_destroy = true\r}\r}\rresource \u0026#34;aws_security_group\u0026#34; \u0026#34;elb_http\u0026#34; {\rname = \u0026#34;elb_http\u0026#34;\rdescription = \u0026#34;Allow HTTP traffic to instances through Elastic Load Balancer\u0026#34;\rvpc_id = aws_vpc.mando_vpc.id\ringress {\rfrom_port = 80\rto_port = 80\rprotocol = \u0026#34;tcp\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\regress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\rtags = {\rName = \u0026#34;Allow HTTP through ELB Security Group\u0026#34;\r}\r}\rresource \u0026#34;aws_elb\u0026#34; \u0026#34;web_elb\u0026#34; {\rname = \u0026#34;web-elb\u0026#34;\rsecurity_groups = [\raws_security_group.elb_http.id\r]\rsubnets = [\raws_subnet.mando_public_subnet_us_east_1a.id,\raws_subnet.mando_public_subnet_us_east_1b.id\r]\rcross_zone_load_balancing = true\rhealth_check {\rhealthy_threshold = 2\runhealthy_threshold = 2\rtimeout = 3\rinterval = 30\rtarget = \u0026#34;HTTP:80/\u0026#34;\r}\rlistener {\rlb_port = 80\rlb_protocol = \u0026#34;http\u0026#34;\rinstance_port = \u0026#34;80\u0026#34;\rinstance_protocol = \u0026#34;http\u0026#34;\r}\r}\rresource \u0026#34;aws_autoscaling_group\u0026#34; \u0026#34;web\u0026#34; {\rname = \u0026#34;${aws_launch_configuration.web.name}-asg\u0026#34;\rmin_size = 1\rdesired_capacity = 2\rmax_size = 4\rhealth_check_type = \u0026#34;ELB\u0026#34;\rload_balancers = [\raws_elb.web_elb.id\r]\rlaunch_configuration = aws_launch_configuration.web.name\renabled_metrics = [\r\u0026#34;GroupMinSize\u0026#34;,\r\u0026#34;GroupMaxSize\u0026#34;,\r\u0026#34;GroupDesiredCapacity\u0026#34;,\r\u0026#34;GroupInServiceInstances\u0026#34;,\r\u0026#34;GroupTotalInstances\u0026#34;\r]\rmetrics_granularity = \u0026#34;1Minute\u0026#34;\rvpc_zone_identifier = [\raws_subnet.mando_public_subnet_us_east_1a.id,\raws_subnet.mando_public_subnet_us_east_1b.id\r]\r# Required to redeploy without an outage.\rlifecycle {\rcreate_before_destroy = true\r}\rtag {\rkey = \u0026#34;Name\u0026#34;\rvalue = \u0026#34;web\u0026#34;\rpropagate_at_launch = true\r}\r}\rresource \u0026#34;aws_autoscaling_policy\u0026#34; \u0026#34;web_policy_up\u0026#34; {\rname = \u0026#34;web_policy_up\u0026#34;\rscaling_adjustment = 1\radjustment_type = \u0026#34;ChangeInCapacity\u0026#34;\rcooldown = 300\rautoscaling_group_name = aws_autoscaling_group.web.name\r}\rresource \u0026#34;aws_cloudwatch_metric_alarm\u0026#34; \u0026#34;web_cpu_alarm_up\u0026#34; {\ralarm_name = \u0026#34;web_cpu_alarm_up\u0026#34;\rcomparison_operator = \u0026#34;GreaterThanOrEqualToThreshold\u0026#34;\revaluation_periods = \u0026#34;2\u0026#34;\rmetric_name = \u0026#34;CPUUtilization\u0026#34;\rnamespace = \u0026#34;AWS/EC2\u0026#34;\rperiod = \u0026#34;120\u0026#34;\rstatistic = \u0026#34;Average\u0026#34;\rthreshold = \u0026#34;60\u0026#34;\rdimensions = {\rAutoScalingGroupName = aws_autoscaling_group.web.name\r}\ralarm_description = \u0026#34;This metric monitor EC2 instance CPU utilization\u0026#34;\ralarm_actions = [aws_autoscaling_policy.web_policy_up.arn]\r}\rresource \u0026#34;aws_autoscaling_policy\u0026#34; \u0026#34;web_policy_down\u0026#34; {\rname = \u0026#34;web_policy_down\u0026#34;\rscaling_adjustment = -1\radjustment_type = \u0026#34;ChangeInCapacity\u0026#34;\rcooldown = 300\rautoscaling_group_name = aws_autoscaling_group.web.name\r}\rresource \u0026#34;aws_cloudwatch_metric_alarm\u0026#34; \u0026#34;web_cpu_alarm_down\u0026#34; {\ralarm_name = \u0026#34;web_cpu_alarm_down\u0026#34;\rcomparison_operator = \u0026#34;LessThanOrEqualToThreshold\u0026#34;\revaluation_periods = \u0026#34;2\u0026#34;\rmetric_name = \u0026#34;CPUUtilization\u0026#34;\rnamespace = \u0026#34;AWS/EC2\u0026#34;\rperiod = \u0026#34;120\u0026#34;\rstatistic = \u0026#34;Average\u0026#34;\rthreshold = \u0026#34;10\u0026#34;\rdimensions = {\rAutoScalingGroupName = aws_autoscaling_group.web.name\r}\ralarm_description = \u0026#34;This metric monitor EC2 instance CPU utilization\u0026#34;\ralarm_actions = [aws_autoscaling_policy.web_policy_down.arn]\r} Since it is a big file, let\u0026rsquo;s divide it in parts:\nVPC, subnets, route tables and routes, internet gateway, security group and key pair: the foundation or basic part of the infrastructure' Launch Configuration: this is where we define the parameters for the EC2 instances that the Autoscaling Group will launch. It\u0026rsquo;s very similar to when we deploy a single EC2 instance; Elastic Load Balancer: we deploy a security group specifically for the ELB first, and then the ELB itself. We have to specify which subnets, the listener and the health checks we\u0026rsquo;ll use. Autoscaling Group: this is the most important part regarding on how the infrastructure will \u0026ldquo;behave\u0026rdquo;, let\u0026rsquo;s say. We define a minimum, desired and maximum number of instances; specify what is going to be the health check, in this case is ELB so instance availability will be provided by it; then we set some Cloudwatch metrics to provide observability and add tags to identify the instances. outputs.tf:\noutput \u0026#34;elb_dns_name\u0026#34; {\rvalue = aws_elb.web_elb.dns_name\r} The only output we have is the DNS name of the ELB, which we\u0026rsquo;ll need to access it.\nuserdata.tpl:\n#!/bin/bash\rsudo apt -y update \u0026amp;\u0026amp;\rsudo apt -y install \\\rnginx \u0026amp;\u0026amp;\recho \u0026#34;$(curl http://169.254.169.254/latest/meta-data/local-ipv4)\u0026#34; \u0026gt; /usr/share/nginx/html/index.html\rsudo systemctl enable nginx\rsudo systemctl start nginx This userdata will install nginx on the EC2 instance at the first boot.\n",
    "ref": "/blog/terraform-2/"
  },{
    "title": "Basic Dev Environment on AWS using Terraform",
    "date": "",
    "description": "Using Terraform to deploy a basic dev environment on AWS",
    "body": "It\u0026rsquo;s good to have a basic terraform code that deploys a basic environment on AWS whenever you need to run some quick tests on a free tier account.\nWe\u0026rsquo;ll have the following resources deployed with this procedure:\n1 VPC 1 Subnet 1 Internet Gateway 1 Route Table (with a default route and an association) 1 Security group 1 Key Pair 1 EC2 Instance It\u0026rsquo;s a very simple and you can build on top of it according to your needs, like adding a RDS instance or more EC2 instances, changing the instance type and so on. The code will be organized in the following structure:\nmain.tf: resource declaration providers.tf: aws provider configuration outputs.tf: output declaration datasources.tf: we\u0026rsquo;ll get the AMI information here variables.tf: only to inform our OS terraform.tfvars: same as previous userdata.tpl: script to be executed on first boot linux-ssh-config.tpl: SSH config for Linux windows-ssh-config.tpl: SSH config for Windows I added a local-exec provisioner that adds the host information in the ssh configuration, and with that we can then use it with VS Code and Remote SSH extension to connect directly to it and run our code.\nI\u0026rsquo;ll put the code first and then explain the most important parts. Let\u0026rsquo;s start with providers.tf:\nterraform {\rrequired_providers {\raws = {\rsource = \u0026#34;hashicorp/aws\u0026#34;\rversion = \u0026#34;~\u0026gt; 3.0\u0026#34;\r}\r}\r}\rprovider \u0026#34;aws\u0026#34; {\rshared_credentials_file = \u0026#34;/home/mando/.aws/credentials\u0026#34;\rprofile = \u0026#34;mando\u0026#34;\rregion = \u0026#34;us-east-1\u0026#34;\r} Terraform requires credentials to access your account on AWS. You can choose different approaches for that, like putting the keys directly instad of pointing to a credentials file. Although that works and might even be easier, you\u0026rsquo;ll probably have your code pushed into a git repository which would then expose the keys. More information on how to configure the provider can be found here -\u0026gt; Docs overview | hashicorp/aws.\nNow for the main.tf:\nresource \u0026#34;aws_vpc\u0026#34; \u0026#34;mando_vpc\u0026#34; {\rcidr_block = \u0026#34;10.10.0.0/16\u0026#34;\renable_dns_hostnames = true\renable_dns_support = true\rtags = {\rName = \u0026#34;dev\u0026#34;\r}\r}\rresource \u0026#34;aws_subnet\u0026#34; \u0026#34;mando_public_subnet\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rcidr_block = \u0026#34;10.10.1.0/24\u0026#34;\rmap_public_ip_on_launch = true\ravailability_zone = \u0026#34;us-east-1b\u0026#34;\rtags = {\rName = \u0026#34;dev-public\u0026#34;\r}\r}\rresource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;mando_internet_gw\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rtags = {\rName = \u0026#34;dev-igw\u0026#34;\r}\r}\rresource \u0026#34;aws_route_table\u0026#34; \u0026#34;mando_public_rt\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rtags = {\rName = \u0026#34;dev-public-rt\u0026#34;\r}\r}\rresource \u0026#34;aws_route\u0026#34; \u0026#34;mando_default_route\u0026#34; {\rroute_table_id = aws_route_table.mando_public_rt.id\rdestination_cidr_block = \u0026#34;0.0.0.0/0\u0026#34;\rgateway_id = aws_internet_gateway.mando_internet_gw.id\r}\rresource \u0026#34;aws_main_route_table_association\u0026#34; \u0026#34;mando_public_assoc\u0026#34; {\rvpc_id = aws_vpc.mando_vpc.id\rroute_table_id = aws_route_table.mando_public_rt.id\r}\rresource \u0026#34;aws_security_group\u0026#34; \u0026#34;mando_sg\u0026#34; {\rname = \u0026#34;mando-sg\u0026#34;\rdescription = \u0026#34;mando Security Group\u0026#34;\rvpc_id = aws_vpc.mando_vpc.id\ringress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;200.199.198.197/32\u0026#34;] # Replace with your public IP\r}\regress {\rfrom_port = 0\rto_port = 0\rprotocol = \u0026#34;-1\u0026#34;\rcidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;]\r}\rtags = {\rName = \u0026#34;mando-sg\u0026#34;\r}\r}\rresource \u0026#34;aws_key_pair\u0026#34; \u0026#34;mando_key\u0026#34; {\rkey_name = \u0026#34;mando-key\u0026#34;\rpublic_key = \u0026#34;ssh-rsa AAAABACH3L0Lc2EAAAADAQAPNCDAgQDELie/jIMM8uno12enId2YTmTjK1OGZJtTJFoSPdXIwn79qpZYQ3WXL8PlI/8dqFyGXvQj5bGJbgEydjSYVHFXFhPr4sdKcjguWbu895EjK2DgalcYuC1+6jBbFxiodoObsc+84m81+BACH3L0LQU3cm/rNKufrh6d21jIe4sQVul+WzJ9E8aPk34rPmRPgjYvh1T/P2hdgiUyJmKqOtDYwpokDRad+3W+iwGfoBACH3L0LoCWJ2rYzz6j80FKoiHm9cnSXvErezT7aAdenVzY3nEE4ylnHWVUdmzXN7IbCSLsDV3sdn0+c5E6oDX2/k1VwtSQ8TrUblM7AdpuB4ADniUSYvLqjd/NBIiHODzV6qZxXqoltVTsrTpbCWf1A063PBACH3L0L/F3mxBihWRAKfD1iqqfMXmYvAPosOkJ3u1yuwy/eCi6Q3SmA5n0vBSVKmYdUB9yQdAimWcUqabRzXLz+g8BrUxCBHwOf4+IZAp2AseJeoDQs0aqMwybr/k= mando\u0026#34; # replace with your key\r}\rresource \u0026#34;aws_instance\u0026#34; \u0026#34;mando_node\u0026#34; {\rami = data.aws_ami.server_ami.id\rinstance_type = \u0026#34;t2.micro\u0026#34;\rkey_name = aws_key_pair.mando_key.id\rvpc_security_group_ids = [aws_security_group.mando_sg.id]\rsubnet_id = aws_subnet.mando_public_subnet.id\ruser_data = file(\u0026#34;userdata.tpl\u0026#34;)\rroot_block_device {\rvolume_size = 10\r}\rprovisioner \u0026#34;local-exec\u0026#34; {\rcommand = templatefile(\u0026#34;${var.host_os}-ssh-config.tpl\u0026#34;, {\rhostname = self.public_ip,\ruser = \u0026#34;ubuntu\u0026#34;,\ridentityfile = \u0026#34;~/.ssh/id_rsa\u0026#34;\r})\rinterpreter = var.host_os == \u0026#34;windows\u0026#34; ? [\u0026#34;powershell\u0026#34;, \u0026#34;-Command\u0026#34;] : [\u0026#34;bash\u0026#34;, \u0026#34;-c\u0026#34;]\r}\rtags = {\rName = \u0026#34;mando-node\u0026#34;\r}\r} We\u0026rsquo;ll not be using the default VPC or any other that was previously deployed, so we start by creating a VPC, a subnet and an Internet Gateway. We then have to create the route table, the default route and associate it with our VPC.\nAfter that, we create a security group and configure it to allow TCP access from our public IP. This of course can be adjusted according to specific needs, so I used a simple example that is not restrictive regarding what can be accessed, but very restrictive in the source IP. This prevents any access from outside, but might stop you from working with more people or from different places, and you\u0026rsquo;ll have to adjust the SG whenever your public ip changes.\nThen we create a key pair, and here you can use an existing one or generate a specific for this case, and you can also point to a file instead of pasting the key on the code.\nAnd last, but not least important, we specify an EC2 instance. The instance type is one that falls into free tier, and the root_block_device block is used to change the default size to 10. This can also be changed accordingly.\ndatasources.tf:\ndata \u0026#34;aws_ami\u0026#34; \u0026#34;server_ami\u0026#34; {\rmost_recent = true\rowners = [\u0026#34;099720109477\u0026#34;]\rfilter {\rname = \u0026#34;name\u0026#34;\rvalues = [\u0026#34;ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*\u0026#34;]\r}\r} We use a data block to determine the AMI ID, since it changes between regions. We also use a filter block with a * at the end of the name, so we always pick the latest version. This can be changed when you want to lock in a specific version, which would be a best practice in production environments. Since we\u0026rsquo;re just testing, we might use the updated image with the latest security fixes.\nvariables.tf:\nvariable \u0026#34;host_os\u0026#34; {\rtype = string\r} terraform.tfvars:\nhost_os = \u0026#34;linux\u0026#34; A single variable is declared and are used just for informing which OS we use (Windows or Linux).\noutputs.tf:\noutput \u0026#34;dev_ip\u0026#34; {\rvalue = aws_instance.mando_node.public_ip\r} The only output we have is the public IP address of the EC2 instance, which we\u0026rsquo;ll need to access it.\nuserdata.tpl:\n#!/bin/bash\rsudo apt -y update \u0026amp;\u0026amp;\rsudo apt -y install \\\rapt-transport-https \\\rsoftware-properties-common \\\rca-certificates \\\rcurl \\\rgnupg \\\rlsb-release \u0026amp;\u0026amp;\rsudo mkdir -p /etc/apt/keyrings \u0026amp;\u0026amp;\rcurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg \u0026amp;\u0026amp;\recho \\\r\u0026#34;deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \\\r$(lsb_release -cs) stable\u0026#34; | sudo tee /etc/apt/sources.list.d/docker.list \u0026gt; /dev/null \u0026amp;\u0026amp;\rsudo apt -y update \u0026amp;\u0026amp;\rsudo apt -y install docker-ce docker-ce-cli containerd.io docker-compose-plugin \u0026amp;\u0026amp;\rsudo groupadd docker \u0026amp;\u0026amp;\rnewgrp docker \u0026amp;\u0026amp;\rsudo usermod -aG docker ubuntu This userdata will install docker on the EC2 instance.\nwindows-ssh-config.tpl:\nadd-content -path c:/users/fabio/.ssh/config -value @\u0026#39;\rHost ${hostname}\rHostName ${hostname}\rUser ${user}\rIdentityFile ${identityfile}\r\u0026#39;@ linux-ssh-config.tpl:\ncat \u0026lt;\u0026lt; EOF \u0026gt;\u0026gt; ~/.ssh/config\rHost ${hostname}\rHostName ${hostname}\rUser ${user}\rIdentityFile ${identityfile}\rEOF These two template files - windows-ssh-config.tpl and linux-ssh-config.tpl - are used by the local-exec provisioner to add the host information in our ssh configuration. This will make it easier to access it from VS Code.\nAfter you apply this code, you can then proceed to configure Remote SSH on VS Code and use it as a remote dev node. I\u0026rsquo;ll not cover here how to do this since the focus is the Terraform itself, and because it is easily done.\n",
    "ref": "/blog/terraform-1/"
  },{
    "title": "Getting started with Jenkins Declarative Pipelines",
    "date": "",
    "description": "My approach on running declarative pipelines on Jenkins to build, test and deploy a sample springboot application, using Docker and some useful integrations like Git and Slack.",
    "body": "After hours and hours of training, videos, documentation, and tutorials, it was time to put into practice the concepts I learned about Jenkins, one of the most used automation tools for CI/CD.\nIt is known that there are many other more modern solutions today, like GitHub Actions or Gitlab CI, for instance, which is a common approach since you can leverage the SCM directly to automate your tasks instead of depending on an external tool. However, Jenkins is still widely adopted and you can perform many automation tasks without much effort using it. It\u0026rsquo;s all going to depend on the situation, the current project, and the team. Traditionally, Jenkins jobs were created using the Jenkins UI and were called FreeStyle jobs. In Jenkins 2.0, a new way was introduced using a technique called pipeline as code, where jobs are created using a script file containing the steps to be executed. That scripted file is called Jenkinsfile. That\u0026rsquo;s just a glimpse on Jenkins pipelines, there\u0026rsquo;s much more depth to it and you can always dive deeper using the official documentation at https://www.jenkins.io/doc/book/pipeline/.\nBefore we start to get into the real stuff, let me just mention a reference that inevitably came into my mind when I first read the name \u0026ldquo;Jenkins\u0026rdquo;, which I\u0026rsquo;m sure that most gamers from early 2000s are gonna remember:\nIf you\u0026rsquo;d like to watch the video, here\u0026rsquo;s the YouTube link to it: Leeroy Jenkins HD 1080p\nAlright, let’s start with the basics.\n1. What\u0026rsquo;s a CI/CD Pipeline? A CI/CD pipeline is usually described as the processes and stages of automation on software delivery. There\u0026rsquo;s usually a specific tool used to achieve this, that orchestrates with SCM and the other tools. It can be used to build code, run unit tests, smoke tests, call external tools like SonarQube, Anchore, Trivy, build Docker images and deploy to environments like Kubernetes or wherever the application is delivered. By performing standardized operations and tests, a CI/CD pipeline can help reduce manual errors, provide feedback to developers, and allow fast iterations.\n2. What\u0026rsquo;s a Jenkinsfile? A Jenkinsfile is just a text file, usually checked in along with the project\u0026rsquo;s source code in an SCM. Ideally, each application will have its Jenkinsfile. A Jenkinsfile can be written in two ways - \u0026ldquo;scripted pipeline syntax\u0026rdquo; or \u0026ldquo;declarative pipeline syntax\u0026rdquo;.\n3. What\u0026rsquo;s a Jenkins Scripted Pipeline? Scripted pipelines run on the Jenkins master with the help of a lightweight executor. It uses very few resources to translate the pipeline into atomic commands. Both declarative and scripted syntax are different from each other and are defined differently. Scripted pipelines are written in Groovy.\nIt requires knowledge of the Groovy language; The Jenkinsfile starts with the word \u0026rsquo;node'; Advanced cabapilities; Groovy engine; Can contain standard programming constructs like if-else block, try-catch block, etc. An example of a Scripted Pipeline:\nnode {\rstage(\u0026#39;Build\u0026#39;) {\rif (env.BRANCH_NAME == \u0026#39;master\u0026#39;) {\recho \u0026#34;I\u0026#39;m on master brand, building application\u0026#34;\rbat \u0026#34;msbuild ${C:\\\\Jenkins\\\\my_project\\\\workspace\\\\test\\\\my_project.sln}\u0026#34;\r} else {\recho \u0026#39;Towards the center of the Cloud Computer.\u0026#39;\r}\r}\rstage(\u0026#39;Selenium\u0026#39;) {\recho \u0026#39;Running Selenium Smoke Tests\u0026#39;\rdir(bachelol) { //changes the path to “bachelol”\rbat \u0026#34;mvn clean test -Dsuite=SMOKE_TEST -Denvironment=QA\u0026#34;\r} }\r} 4. What\u0026rsquo;s a Jenkins Declarative Pipeline? The Declarative Pipeline is relatively new and provides a simplified, opinionated syntax on top of the Pipeline subsystems. Its syntax offers an easy way to create pipelines. It contains a predefined hierarchy and gives you the ability to control all aspects of a pipeline execution in a simple, straightforward manner.\nThe latest addition in Jenkins pipeline job creation technique; Needs to use the predefined constructs to create pipelines; Hence, it is not flexible as a scripted pipeline; The Jenkinsfile starts with the word \u0026lsquo;pipeline\u0026rsquo;, and there is a predefined structure; Usually, the preferred way to start, as they offer a rich set of features, come with less learning curve \u0026amp; no prerequisite to learn a programming language like Groovy just for the sake of writing pipeline code; We can also validate the syntax of the Declarative pipeline code before running the job. It helps to avoid a lot of runtime issues with the build script. 5. Why run Jenkins on Docker? Despite the inherent advantages (and caveats) of running anything in Docker, the main reasons I could think of are:\nAbility to keep the server configuration under version control; Run multiple copies of the server anywhere; Integrate with Kubernetes and other orchestration platforms; Jenkins\u0026rsquo; official Docker image is widely adopted and maintained; Simple implementation = simple administration. The main (Drawback|Caveat|Problem|Issue|Flaw) is when you want to use agents with docker too. To do that you\u0026rsquo;re gonna need some implementation of Docker in Docker. There are a few ways to do that, but the two easiest ways are connecting the Jenkins container directly to the host\u0026rsquo;s Docker socket using -v /var/run/docker.sock:/var/run/docker.sock and changing the permissions, or enabling TCP on the Docker server-side. If you can run your Jenkins server on Kubernetes, you can enable it to launch new agent pods inside the cluster which gives you even more flexibility. I\u0026rsquo;ll try that in the future since I\u0026rsquo;m out of credits on AWS and my dev cluster is behind a proxy, which is a real pain to deal with.\n6. Building a Jenkins Image The Dockerfile below creates an image based on the latest Jenkins LTS from Dockerhub, and preinstalls the plugins needed:\nFROM jenkins/jenkins:lts\r# Skip setup wizard\rENV JAVA_OPTS=\u0026#34;-Djenkins.install.runSetupWizard=false\u0026#34;\r# Set docker group\rARG DOCKER_GID=998\r# Get plugins\rRUN /usr/local/bin/install-plugins.sh \\\rworkflow-multibranch:latest \\\rpipeline-model-definition:latest \\\rpipeline-stage-view:latest \\\rgit:latest \\\rcredentials:latest \\\rslack:latest\r# Install Docker \u0026amp; docker-compose\rUSER root\rRUN apt-get update \u0026amp;\u0026amp; \\\rapt-get -y install apt-transport-https \\\rca-certificates \\\rcurl \\\rgnupg2 \\\rsoftware-properties-common \u0026amp;\u0026amp; \\\rcurl -fsSL https://download.docker.com/linux/$(. /etc/os-release; echo \u0026#34;$ID\u0026#34;)/gpg \u0026gt; /tmp/dkey; apt-key add /tmp/dkey \u0026amp;\u0026amp; \\\radd-apt-repository \\\r\u0026#34;deb [arch=amd64] https://download.docker.com/linux/$(. /etc/os-release; echo \u0026#34;$ID\u0026#34;) \\\r$(lsb_release -cs) \\\rstable\u0026#34; \u0026amp;\u0026amp; \\\rapt-get update \u0026amp;\u0026amp; \\\rgroupadd -g ${DOCKER_GID} docker \u0026amp;\u0026amp; \\\rapt-get -y install docker-ce docker-ce-cli containerd.io\rRUN curl -L \u0026#34;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\u0026#34; -o /usr/local/bin/docker-compose \u0026amp;\u0026amp; chmod +x /usr/local/bin/docker-compose\rRUN usermod -aG docker jenkins USER jenkins I referred to the official documentation: https://docs.docker.com/compose/install/ https://docs.docker.com/engine/install/ubuntu/\nTo spin up a Jenkins instance on my local machine, I used a docker-compose.yml file and put everything on the same folder. The jenkins service points to a dockerfile on the same path, and the container will be accessible on localhost:9080. I mapped the docker.sock to the container and matched the docker GID with the host, and also created and mapped a jenkins_home folder locally to persist data:\nversion: \u0026#34;3.8\u0026#34;\rservices:\rjenkins:\rbuild:\rcontext: .\rdockerfile: Dockerfile\rports:\r- \u0026#34;127.0.0.1:9080:8080\u0026#34;\rvolumes:\r- ./jenkins_home:/var/jenkins_home\r- /var/run/docker.sock:/var/run/docker.sock\rrestart: unless-stopped Now that we have a running Jenkins instance with the plugins installed and with access to the host\u0026rsquo;s dockerd, let\u0026rsquo;s start using it to automate a build.\n7. The Spring PetClinic Sample Application To test everything, I downloaded the \u0026ldquo;Spring PetClinic Sample Application\u0026rdquo; (can be found here: https://github.com/spring-projects/spring-petclinic), which is written in Java using Spring Boot and built with Maven. If you clone the official repository, you\u0026rsquo;ll get a Maven Wrapper bundled together that can be used to build the application. So before trying to automate anything with Jenkins, let\u0026rsquo;s first build, test, and run the application manually:\n# Clone the repo\rgit clone https://github.com/spring-projects/spring-petclinic.git\r# Enter the directory\rcd spring-petclinic\r#Build the application\r./mvnw package\r#Run the application\rjava -jar target/*.jar The first time I ran the mvnw package command, it took a while to finish since it downloaded all the dependencies. After that, subsequent runs took around a minute to finish. That\u0026rsquo;s pretty much all we have to do to test if it builds and runs properly, I just followed the instructions from the repository without changing anything. If it runs, we know that the code should work inside the pipeline too. The changes will come when we use the Maven from Jenkins and try to run JUnit tests.\nOutput from the build:\n[INFO] Building jar: ./github/spring-petclinic/target/spring-petclinic-2.5.0-SNAPSHOT.jar\r[INFO] [INFO] --- spring-boot-maven-plugin:2.5.4:repackage (repackage) @ spring-petclinic ---\r[INFO] Replacing main artifact with repackaged archive\r[INFO] ------------------------------------------------------------------------\r[INFO] BUILD SUCCESS\r[INFO] ------------------------------------------------------------------------\r[INFO] Total time: 01:15 min\r[INFO] Finished at: 2021-10-19T11:35:43-03:00\r[INFO] ------------------------------------------------------------------------ Output from java -jar target/*.jar:\njava -jar target/*.jar\r|\\ _,,,--,,_\r/,`.-\u0026#39;`\u0026#39; ._ \\-;;,_\r_______ __|,4- ) )_ .;.(__`\u0026#39;-\u0026#39;__ ___ __ _ ___ _______\r| | \u0026#39;---\u0026#39;\u0026#39;(_/._)-\u0026#39;(_\\_) | | | | | | | | |\r| _ | ___|_ _| | | | | |_| | | | __ _ _\r| |_| | |___ | | | | | | | | | | \\ \\ \\ \\\r| ___| ___| | | | _| |___| | _ | | _| \\ \\ \\ \\\r| | | |___ | | | |_| | | | | | | |_ ) ) ) )\r|___| |_______| |___| |_______|_______|___|_| |__|___|_______| / / / /\r==================================================================/_/_/_/\r:: Built with Spring Boot :: 2.5.4\r2021-10-19 11:38:31.201 INFO 39806 --- [ main] o.s.s.petclinic.PetClinicApplication : Starting PetClinicApplication v2.5.0-SNAPSHOT using Java 11.0.11 on my-machine with PID 39806 (./github/spring-petclinic/target/spring-petclinic-2.5.0-SNAPSHOT.jar started by biofa in ./github/spring-petclinic)\r2021-10-19 11:38:31.204 INFO 39806 --- [ main] o.s.s.petclinic.PetClinicApplication : No active profile set, falling back to default profiles: default\r2021-10-19 11:38:32.230 INFO 39806 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.\r2021-10-19 11:38:32.288 INFO 39806 --- [ main] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 50 ms. Found 4 JPA repository interfaces.\r2021-10-19 11:38:33.020 INFO 39806 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat initialized with port(s): 8080 (http)\r2021-10-19 11:38:33.036 INFO 39806 --- [ main] o.apache.catalina.core.StandardService : Starting service [Tomcat]\r2021-10-19 11:38:33.037 INFO 39806 --- [ main] org.apache.catalina.core.StandardEngine : Starting Servlet engine: [Apache Tomcat/9.0.52]\r2021-10-19 11:38:33.128 INFO 39806 --- [ main] o.a.c.c.C.[Tomcat].[localhost].[/] : Initializing Spring embedded WebApplicationContext\r2021-10-19 11:38:33.128 INFO 39806 --- [ main] w.s.c.ServletWebServerApplicationContext : Root WebApplicationContext: initialization completed in 1865 ms\r2021-10-19 11:38:33.377 INFO 39806 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Starting...\r2021-10-19 11:38:33.590 INFO 39806 --- [ main] com.zaxxer.hikari.HikariDataSource : HikariPool-1 - Start completed.\r2021-10-19 11:38:33.919 INFO 39806 --- [ main] org.ehcache.core.EhcacheManager : Cache \u0026#39;vets\u0026#39; created in EhcacheManager.\r2021-10-19 11:38:33.934 INFO 39806 --- [ main] org.ehcache.jsr107.Eh107CacheManager : Registering Ehcache MBean javax.cache:type=CacheStatistics,CacheManager=urn.X-ehcache.jsr107-default-config,Cache=vets\r2021-10-19 11:38:33.941 INFO 39806 --- [ main] org.ehcache.jsr107.Eh107CacheManager : Registering Ehcache MBean javax.cache:type=CacheStatistics,CacheManager=urn.X-ehcache.jsr107-default-config,Cache=vets\r2021-10-19 11:38:34.021 INFO 39806 --- [ main] o.hibernate.jpa.internal.util.LogHelper : HHH000204: Processing PersistenceUnitInfo [name: default]\r2021-10-19 11:38:34.081 INFO 39806 --- [ main] org.hibernate.Version : HHH000412: Hibernate ORM core version 5.4.32.Final\r2021-10-19 11:38:34.204 INFO 39806 --- [ main] o.hibernate.annotations.common.Version : HCANN000001: Hibernate Commons Annotations {5.1.2.Final}\r2021-10-19 11:38:34.332 INFO 39806 --- [ main] org.hibernate.dialect.Dialect : HHH000400: Using dialect: org.hibernate.dialect.H2Dialect\r2021-10-19 11:38:34.955 INFO 39806 --- [ main] o.h.e.t.j.p.i.JtaPlatformInitiator : HHH000490: Using JtaPlatform implementation: [org.hibernate.engine.transaction.jta.platform.internal.NoJtaPlatform]\r2021-10-19 11:38:34.962 INFO 39806 --- [ main] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit \u0026#39;default\u0026#39;\r2021-10-19 11:38:36.371 INFO 39806 --- [ main] o.s.b.a.e.web.EndpointLinksResolver : Exposing 13 endpoint(s) beneath base path \u0026#39;/actuator\u0026#39;\r2021-10-19 11:38:36.441 INFO 39806 --- [ main] o.s.b.w.embedded.tomcat.TomcatWebServer : Tomcat started on port(s): 8080 (http) with context path \u0026#39;\u0026#39;\r2021-10-19 11:38:36.453 INFO 39806 --- [ main] o.s.s.petclinic.PetClinicApplication : Started PetClinicApplication in 5.753 seconds (JVM running for 6.136) 8. Using Maven on Jenkins There are a couple of different ways to use Maven with Jenkins. There is a Maven plugin for Jenkins, and we can install Maven on the Jenkins server and set it up at \u0026ldquo;Global Tool Configuration\u0026rdquo;. Since we want to use docker containers as executors or agents, that would not be an option. We could also use the wrapper that comes with the project, but a better and simple route would be to use the official Maven docker image, and that way we can have an agent always updated and completely separate Maven from our Jenkins server. This approach makes it easier to manage the environment and also allows for a single Jenkins server to work with different types of builds with a single installation, without having to embed every tool used on the server.\nI built a pipeline with six stages: Init, Build, Test and Build Image, Publish Image and Prod. Some of the main aspects are:\nIt mounts the m2 directory, which is used by maven, locally to have cache between builds, and also settings.xml to enable setting custom parameters to Maven; Maven 3.8.3 with AdoptOpenJDK 11 Docker Image is used as an agent only for the stages that require it; Dockerhub credentials were added previously on Jenkins. pipeline {\ragent none\renvironment {\rDEPLOY_TO = \u0026#39;staging\u0026#39;\rimageName = \u0026#34;fabioctba/spring-petclinic\u0026#34;\rregistryCredential = \u0026#39;dockerhub\u0026#39;\rdockerImage = \u0026#39;\u0026#39;\r}\rstages {\rstage(\u0026#39;Init\u0026#39;){\ragent any\rsteps {\rslackSend channel: \u0026#39;#jenkins\u0026#39;, message: \u0026#34;${env.BUILD_ID} on ${env.JENKINS_URL} - Starting\u0026#34;\rsh \u0026#39;git --version\u0026#39;\recho \u0026#34;Deploying to ${DEPLOY_TO}\u0026#34;\r}\r}\rstage(\u0026#39;Build\u0026#39;) {\ragent {\rdocker {\rimage \u0026#39;maven:3.8.3-adoptopenjdk-11\u0026#39;\rargs \u0026#39;-v m2:/root/.m2 -v settings.xml:/root/.m2/settings.xml\u0026#39;\r}\r}\rsteps {\rslackSend channel: \u0026#39;#jenkins\u0026#39;, message: \u0026#34;${env.BUILD_ID} on ${env.JENKINS_URL} - Building\u0026#34;\rsh \u0026#39;mvn -B -DskipTests clean package\u0026#39;\r}\r}\rstage(\u0026#39;Test\u0026#39;) {\ragent {\rdocker {\rimage \u0026#39;maven:3.8.3-adoptopenjdk-11\u0026#39;\rargs \u0026#39;-v m2:/root/.m2 -v settings.xml:/root/.m2/settings.xml\u0026#39;\r}\r}\rsteps {\rslackSend channel: \u0026#39;#jenkins\u0026#39;, message: \u0026#34;${env.BUILD_ID} on ${env.JENKINS_URL} - Running Tests\u0026#34;\rsh \u0026#39;mvn test\u0026#39; }\rpost {\ralways {\rarchiveArtifacts artifacts: \u0026#39;target/*.jar\u0026#39;\rjunit \u0026#39;target/surefire-reports/*.xml\u0026#39; }\r}\r}\rstage(\u0026#39;Build Image\u0026#39;) { agent any\rsteps {\rslackSend channel: \u0026#39;#jenkins\u0026#39;, message: \u0026#34;${env.BUILD_ID} on ${env.JENKINS_URL} - Building Image\u0026#34;\rscript {\rdockerImage = docker.build imageName\r}\r}\r}\rstage(\u0026#39;Publish Image\u0026#39;) { agent any\rsteps {\rslackSend channel: \u0026#39;#jenkins\u0026#39;, message: \u0026#34;${env.BUILD_ID} on ${env.JENKINS_URL} - Building Image\u0026#34;\rscript {\rdocker.withRegistry( \u0026#39;\u0026#39;, registryCredential ) {\rdockerImage.push(\u0026#34;$BUILD_NUMBER\u0026#34;)\rdockerImage.push(\u0026#39;latest\u0026#39;)\r}\r}\r}\r}\rstage(\u0026#39;Prod\u0026#39;) {\ragent any\rwhen { allOf { branch \u0026#39;master\u0026#39;; environment name: \u0026#39;DEPLOY_TO\u0026#39;, value: \u0026#39;production\u0026#39;\r} }\rsteps {\rslackSend channel: \u0026#39;#jenkins\u0026#39;, message: \u0026#34;${env.BUILD_ID} on ${env.JENKINS_URL} - Running Production stage\u0026#34;\recho \u0026#39;Some extra step when on production release\u0026#39;\r}\r}\r}\r} I used the Slack Plugin to integrate with Jenkins, following this documentation. I used only two variables just to illustrate what can be sent as a message, but a full list of environment variables can be found directly on Jenkins accessing http://localhost:9080/env-vars.html. Of course, you have to change localhost:9080 to your server\u0026rsquo;s address.\nThe Init stage prints the versions of the main tools used, useful to debug problems;\nThe Build stage runs mvn package, which creates the jar files;\nThe Test stage run the Unit tests. Spring Pet Clinic has a total of 40 tests configured, and that would depend on how the dev team created their tests;\nThe Build Image stage creates a Docker image and publishes it to the Dockerhub;\nThe Publish Image stage publishes the image to Dockerhub;\nThe Prod stage doesn\u0026rsquo;t do anything, it\u0026rsquo;s just an example of a conditional step that can be executed depending on a variable.\nNotice that there isn\u0026rsquo;t a stage to clone the repository at the beginning; this stage is implicit when you configure Jenkins to pull the pipeline from SCM, which is the plan here.\nHere\u0026rsquo;s the Dockerfile I used to publish the application:\nFROM openjdk:11-jre-slim\rRUN groupadd --gid 1000 java \\\r\u0026amp;\u0026amp; useradd --uid 1000 --gid java --shell /bin/bash --create-home java\rUSER java\rVOLUME /tmp\rWORKDIR /app\rCOPY --chown=java:java ./target/*.jar /app/\rCMD [\u0026#34;java\u0026#34;,\u0026#34;-Djava.security.egd=file:/dev/./urandom\u0026#34;,\u0026#34;-jar\u0026#34;,\u0026#34;/app/*.jar\u0026#34;] That is a working pipeline, and I wanted to include most of the concepts I saw in the courses. There are other features I\u0026rsquo;d like to try in the future like shared libraries and multi-branch pipelines, but this might go into a different post.\n9. Courses I either took or recommend: a. Jenkins, From Zero To Hero: Become a DevOps Jenkins Master Udemy, by Ricardo Andre Gonzalez Gomez, 2018 https://www.udemy.com/course/jenkins-from-zero-to-hero/\nI found this course a little outdated and looks like the author stopped maintaining it in 2020. However, if you never used Jenkins before and want a cheap course to start, I strongly recommend this one. It\u0026rsquo;s also well recommended in many other sources and has a high rate at Udemy. Ricardo focuses a lot on Docker, so it might be better targeted to someone without any experience in Docker also.\nb. Continuous Integration with Jenkins Pluralsight, by different authors, updated constantly https://app.pluralsight.com/paths/skill/continuous-integration-with-jenkins\nPluralsight has a total of 8 courses, each with around 2 hours of duration, which makes the Jenkins Skill Path. I took four of them during the last Pluralsight Free Week and like other courses I took from Pluralsight, the quality was much superior. Unfortunately, Pluralsight costs a great amount of money, so I usually stay on the lookout for their periodically free weeks and free weekends. The good thing is that you can download the course material and most of the authors have GitHub repositories where you can check the code later.\n10. References https://stackoverflow.com/questions/44440164/what-are-the-advantages-of-running-jenkins-in-a-docker-container\nhttps://www.cinqict.nl/blog/building-a-jenkins-development-docker-image\nhttps://tomgregory.com/building-a-spring-boot-application-in-jenkins/\nIf you read it to the end, I\u0026rsquo;d like to hear your comments, and hope this helped you in some way. Cheers.\n. . . .\nAnd sorry for the long post... here's a potato. Source: @truth.potato\n",
    "ref": "/blog/jenkins-1/"
  },{
    "title": "Using Python and Docker to monitor Ceph S3 from outside",
    "date": "",
    "description": "I created a simple application that runs on a Docker container to test and generate metrics on a custom S3 service, in my case being Ceph.",
    "body": "I needed to perform external monitoring on our S3 endpoints to better observe how the service was performing, thus getting a better representation of user experience. I use basically Python and Docker to accomplish the task.\nWe have two relatively large Ceph clusters (2.5PB, 600 OSDs) at the company that provides object storage using implementing the S3 API, so we can leverage the AWS SDK and use it to perform operations like creating buckets, putting objects and so on, and measuring the success and the time consumed to perform each operation. With those metrics we can then create graphics, panels and alerts using Grafana for instance. Using some kind of KISS methodology (keep it simple, stupid), running everything inside a docker container would give the flexibility to throw it anywhere and get the same results. The initial goal was to run two containers on AWS pointing to both sites (where the two main Ceph Clusters live) and two others on each site, one pointing to the other.\nFor the task I used Python as the programming language with the Prometheus Client for Python, found at https://github.com/prometheus/client_python. I divided the code in sections to talk about each part.\nLibraries prometheus_client for metrics, boto3 for s3 connection, random\nfrom prometheus_client import Histogram, start_http_server, Summary, Gauge, Counter\rimport boto3\rimport random\rfrom io import BytesIO\rimport os\rimport time\rimport logging Variables Here we define our endpoint address, credentials, name of the bucket and objects, the interval between tests, the histogram buckets and how many objects we want to put simultaneously (for histogram metrics):\nCLUSTER_ENDPOINT = \u0026#39;\u0026#39;\rACCESS_KEY = \u0026#39;\u0026#39;\rSECRET_ACCESS_KEY = \u0026#39;\u0026#39;\rBUCKET_NAME = \u0026#39;the_lord_of_buckets\u0026#39;\rOBJECT_NAME = \u0026#39;the_ruler\u0026#39;\rPORT=9102\rTIME_TO_SLEEP = 120\rLOG_LEVEL=logging.INFO\rBUCKETS=[0.05, 0.1, 0.15, 0.2, 0.25, 0.3, 0.35, 0.4, 0.45, 0.5, 0.55, 0.6, 0.65, 0.7, 0.75, 0.8, 0.85, 0.9, 0.95 ,1]\rOBJCOUNT=15 Metrics Here we define what metrics we want to generate, or collect: ALL_TESTSm S3_FAIL, CREATE, PUT, DELETE, GET_OBJECT, LIST_OBJECTS, REMOVE_BUCKET, DELETE_OBJECTS. For each operation there are three metrics defined: Summary, Gauge and Histogram. Labels were used for each operation.\nALL_TESTS_SUMMARY = Summary(\u0026#39;s3_request_duration_seconds\u0026#39;, \u0026#39;Time spent running the test\u0026#39;,[\u0026#39;task\u0026#39;])\rALL_TESTS_GAUGE = Gauge(\u0026#39;s3_request_last_duration_seconds\u0026#39;,\u0026#39;Time spent on the last test\u0026#39;,[\u0026#39;task\u0026#39;])\rALL_TESTS_HIST = Histogram(\u0026#39;s3_request_duration_seconds_histogram\u0026#39;,\u0026#39;Time spent on the last test\u0026#39;,[\u0026#39;task\u0026#39;],buckets=BUCKETS)\rS3_FAIL = Counter(\u0026#39;s3_requests_fails\u0026#39;, \u0026#39;Number of fails in this process\u0026#39;)\rCREATE_BUCKET_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;create\u0026#39;)\rCREATE_BUCKET_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;create\u0026#39;)\rCREATE_BUCKET_HIST = ALL_TESTS_HIST.labels(\u0026#39;create\u0026#39;)\rPUT_OBJECT_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;put\u0026#39;)\rPUT_OBJECT_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;put\u0026#39;)\rPUT_OBJECT_HIST = ALL_TESTS_HIST.labels(\u0026#39;put\u0026#39;)\rDELETE_OBJECT_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;delete\u0026#39;)\rDELETE_OBJECT_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;delete\u0026#39;)\rDELETE_OBJECT_HIST = ALL_TESTS_HIST.labels(\u0026#39;delete\u0026#39;)\rGET_OBJECT_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;get\u0026#39;)\rGET_OBJECT_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;get\u0026#39;)\rGET_OBJECT_HIST = ALL_TESTS_HIST.labels(\u0026#39;get\u0026#39;)\rLIST_OBJECTS_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;list_objects\u0026#39;)\rLIST_OBJECTS_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;list_objects\u0026#39;)\rLIST_OBJECTS_HIST = ALL_TESTS_HIST.labels(\u0026#39;list_objects\u0026#39;)\rLIST_BUCKETS_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;list_buckets\u0026#39;)\rLIST_BUCKETS_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;list_buckets\u0026#39;)\rLIST_BUCKETS_HIST = ALL_TESTS_HIST.labels(\u0026#39;list_buckets\u0026#39;)\rREMOVE_BUCKET_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;remove\u0026#39;)\rREMOVE_BUCKET_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;remove\u0026#39;)\rREMOVE_BUCKET_HIST = ALL_TESTS_HIST.labels(\u0026#39;remove\u0026#39;)\rDELETE_OBJECTS_SUMMARY = ALL_TESTS_SUMMARY.labels(\u0026#39;delete_many\u0026#39;)\rDELETE_OBJECTS_GAUGE = ALL_TESTS_GAUGE.labels(\u0026#39;delete_many\u0026#39;)\rDELETE_OBJECTS_HIST = ALL_TESTS_HIST.labels(\u0026#39;delete_many\u0026#39;) Class S3Metrics This is where stuff gets done! There is an init function to set the parameters from the variables, start logging and create an a s3 resource from the boto3 library. Decorators were used to measure the time spend in each function and the run_all_tests funcion calls all the tests, which is the one we use as we\u0026rsquo;ll see next.\nclass S3Metrics:\rs3 = None\rbucket = None\rfile_size = 512\rdata = None\rkey_name = None\rdata_out = None\rdef __init__(self, bucket_name, key_name):\rcluster_endpoint = os.getenv(\u0026#39;CLUSTER_ENDPOINT\u0026#39;,default=CLUSTER_ENDPOINT)\raccess_key = os.getenv(\u0026#39;ACCESS_KEY\u0026#39;,default=ACCESS_KEY)\rsecret_access_key = os.getenv(\u0026#39;SECRET_ACCESS_KEY\u0026#39;,default=SECRET_ACCESS_KEY)\rlog_level = os.getenv(\u0026#39;LOG_LEVEL\u0026#39;,default=LOG_LEVEL)\rself.bucket = bucket_name\rself.key_name = key_name\rself.generate_data()\rlogging.basicConfig(level=int(log_level))\rself.s3 = boto3.resource(\u0026#39;s3\u0026#39;,\rendpoint_url=cluster_endpoint,\raws_access_key_id=access_key,\raws_secret_access_key=secret_access_key)\r@CREATE_BUCKET_HIST.time()\r@CREATE_BUCKET_GAUGE.time()\r@CREATE_BUCKET_SUMMARY.time()\rdef create_bucket(self):\rtry:\rbucket = self.s3.Bucket(self.bucket)\rbucket.create()\rexcept:\rS3_FAIL.inc()\r@PUT_OBJECT_HIST.time()\r@PUT_OBJECT_GAUGE.time()\r@PUT_OBJECT_SUMMARY.time()\rdef put_object(self,key_name=OBJECT_NAME):\rtry:\rbucket = self.s3.Bucket(self.bucket)\rbucket.put_object(\rKey=key_name,\rBody=self.data)\rexcept:\rS3_FAIL.inc()\rdef put_objects(self):\rfor i in range(0,OBJCOUNT):\rself.put_object(self.key_name+str(i))\r@DELETE_OBJECT_HIST.time()\r@DELETE_OBJECT_GAUGE.time()\r@DELETE_OBJECT_SUMMARY.time()\rdef del_object(self):\rtry:\robject = self.s3.Object(self.bucket,self.key_name)\robject.delete()\rexcept:\rS3_FAIL.inc()\r@DELETE_OBJECTS_HIST.time()\r@DELETE_OBJECTS_GAUGE.time()\r@DELETE_OBJECTS_SUMMARY.time()\rdef del_objects(self):\rtry:\rbucket = self.s3.Bucket(self.bucket)\robjects = bucket.objects.all()\rfor object in objects:\robject.delete()\rexcept:\rS3_FAIL.inc()\r@GET_OBJECT_HIST.time()\r@GET_OBJECT_GAUGE.time()\r@GET_OBJECT_SUMMARY.time()\rdef get_object(self):\rself.data_out = None\rtry:\rbucket = self.s3.Bucket(self.bucket)\rdata = BytesIO()\rbucket.download_fileobj(Fileobj=data, Key=self.key_name)\rself.data_out = data.getvalue().decode()\rexcept:\rS3_FAIL.inc()\rdef compare_object(self):\rif self.data != self.data_out:\rS3_FAIL.inc()\r@LIST_BUCKETS_HIST.time()\r@LIST_BUCKETS_GAUGE.time()\r@LIST_BUCKETS_SUMMARY.time()\rdef list_buckets(self):\rtry:\rall_buckets = self.s3.buckets.all()\rfor bucket in all_buckets:\rlogging.debug(\u0026#34;%s %s\u0026#34;, bucket.creation_date, bucket.name)\rexcept:\rS3_FAIL.inc()\r@LIST_OBJECTS_HIST.time()\r@LIST_OBJECTS_GAUGE.time()\r@LIST_OBJECTS_SUMMARY.time()\rdef list_objects(self):\rtry:\rbucket = self.s3.Bucket(self.bucket)\robjects = bucket.objects.all()\rfor object in objects:\rlogging.debug(\u0026#34;%s\u0026#34;, object.key)\rexcept:\rS3_FAIL.inc()\r@REMOVE_BUCKET_HIST.time()\r@REMOVE_BUCKET_GAUGE.time()\r@REMOVE_BUCKET_SUMMARY.time()\rdef remove_bucket(self):\rtry:\rbucket = self.s3.Bucket(self.bucket)\rbucket.delete()\rexcept:\rS3_FAIL.inc()\rdef run_all_tests(self):\rself.create_bucket()\rself.put_object()\rself.list_buckets()\rself.list_objects()\rself.get_object()\rself.compare_object()\rself.del_object()\rself.put_objects()\rself.del_objects()\rself.remove_bucket()\rdef generate_data(self):\rMAX_LIMIT = 126\rdata = \u0026#39;\u0026#39;\rfor _ in range(self.file_size):\rrandom_integer = random.randint(32, MAX_LIMIT)\rdata += (chr(random_integer))\rself.data = data Main Here we start the prometheus exporter and call the method run_all_tests() from class S3Metrics inside an infinite while loop, so the script will run continuously until manually stopped.\ndef main():\rstart_http_server(PORT)\rs3metrics = S3Metrics(BUCKET_NAME, OBJECT_NAME)\rwhile True:\rs3metrics.run_all_tests()\rtime.sleep(TIME_TO_SLEEP)\rif __name__ == \u0026#39;__main__\u0026#39;:\rmain() So now that we have our s3metrics.py, we have to build a container to run it. I created a requirements.txt file to make it easier to adjust the package versions in the future, and used in the Dockerfile the python:3 base image since it already have most of what I need.\nRequirements boto3==1.17.54\rbotocore==1.20.54\rjmespath==0.10.0\rprometheus-client==0.10.1\rpython-dateutil==2.8.1\rs3transfer==0.4.0\rsix==1.15.0\rurllib3==1.26.4 Dockerfile FROM python:3\rWORKDIR /app\rCOPY requirements.txt .\rCOPY s3-metrics.py .\rRUN python3 -m venv .venv; bash -c \u0026#39;source .venv/bin/activate\u0026#39;; pip install -r requirements.txt\rCMD [ \u0026#34;python\u0026#34;, \u0026#34;./s3-metrics.py\u0026#34; ] Build and Run Now we can run the container inside an EC2 instance or anywhere capable of running a docker container (you don\u0026rsquo;t say, lol). I\u0026rsquo;ll later post my terraform script used to deploy it on AWS with more details. Now for the Grafana part:\nGrafana Here\u0026rsquo;s how I configured a Bar gauge graph to see the PUT Histogram:\nWe can see that the majority of the operations take less than 0.5 seconds to finish, so if we start seeing an increase in the other histogram buckets, it means that we probably have a problem.\nI also created a panel to watch for errors and one to see all the operations combined:\nConclusion That kind of monitoring can give a good observability to a service like Ceph S3 Gateway, but this could easily be applied to any other service with some changes. Before that, we used UpTimeRobot to achieve a similar goal, but from my perspective you can have much more control and flexibility with a container like that performing connectivity tests, and in this case we go much deeper by mimicking user operations on our tests.\n",
    "ref": "/blog/python-s3-monitoring/"
  },{
    "title": "Using Rook to leverage Ceph storage on a Kubernetes cluster",
    "date": "",
    "description": "We used Rook to leverage Ceph storage on some Kubernetes clusters with unused storage devices to provide a great option for persistent volumes.",
    "body": "I recently got 10 bare-metal servers to play with, they used to be part of our first Ceph cluster and got replaced with more powerful hardware. So i built two k8s clusters and decided to give Rook a try.\nAs the cluster grew bigger, we purchased not only more servers but with different configuration. But those Dell R530 servers still have pretty decent power to run many internal demands we have, so i built a Ceph cluster with four of them using CentOS 8, Ceph Octopus and deployed everything in containers. But i want to talk about what i did with the remaining six servers, that became two kubernetes clusters - one with Flatcar and the other with Centos, to replicate some production scenarios we have. Since the servers have 8 2TB HDD each and we use just one for the OS, that would be a perfect scenario to experiment with Rook. I tinkered with it previously with some labs but now i could really test its usability.\nGetting Rook to run is pretty straightforward, it might not even be necessary to have great knowledge about ceph for the initial setup. However it would be mandatory to know about Ceph administration for a production environment. There are many administrative tasks that gets taken care of by Rook, but after working with Ceph for the past 3 years i can assure you that there will be many situations where the sysadmin will have to step up.\nI used the quickstart guide as a reference, it can be found on the Rook GitHub page: https://rook.github.io/docs/rook/v1.6/ceph-quickstart.html.\nThe only parameter i changed from the defaults was the ROOK_ENABLE_DISCOVERY_DAEMON, since i wanted it to automatically detect and provision the OSDs on every empty device. It\u0026rsquo;s important to erase the disks prior to the deployment, because it will skip any device with partitions. For that you can use wipefs or even dd. Be aware that if the device has LVM partitions and you want to avoid a reboot you might want to delete the LVs and VGs first. If you wipe the device the kernel might not release the mapped lvm volumes and you will not be able to delete after that. Needless to say that i made that mistake a few times before learning the lesson.\nCommands i used:\ngit clone --single-branch --branch master https://github.com/rook/rook.git\rgit checkout release-1.6\rcd rook/cluster/examples/kubernetes/ceph\rsed -i s/\u0026#34;ROOK_ENABLE_DISCOVERY_DAEMON: \\\u0026#34;false\\\u0026#34;\u0026#34;/\u0026#34;ROOK_ENABLE_DISCOVERY_DAEMON: \\\u0026#34;true\\\u0026#34;\u0026#34;/ operator.yaml\rkubectl create -f crds.yaml -f common.yaml -f operator.yaml\rkubectl create -f cluster.yaml Checking if the pods were created:\n$ kubectl -n rook-ceph get pod\rNAME READY STATUS RESTARTS AGE\rcsi-cephfsplugin-7tkgk 3/3 Running 25 95d\rcsi-cephfsplugin-cv2kq 3/3 Running 6 95d\rcsi-cephfsplugin-provisioner-bc5cff84-8h5b4 6/6 Running 19 95d\rcsi-cephfsplugin-provisioner-bc5cff84-cb477 6/6 Running 6 95d\rcsi-cephfsplugin-qvqjc 3/3 Running 3 95d\rcsi-rbdplugin-2rqwk 3/3 Running 25 95d\rcsi-rbdplugin-g5tkj 3/3 Running 3 95d\rcsi-rbdplugin-provisioner-97957587f-gvn6r 6/6 Running 0 22d\rcsi-rbdplugin-provisioner-97957587f-lflc7 6/6 Running 8 95d\rcsi-rbdplugin-vcsdj 3/3 Running 6 95d\rrook-ceph-crashcollector-node1-7fcbcd7dc6-6fbq6 1/1 Running 2 73d\rrook-ceph-crashcollector-node2-7f699c88c-78gvw 1/1 Running 0 22d\rrook-ceph-crashcollector-node3-77777995d8-dtsrh 1/1 Running 1 95d\rrook-ceph-mgr-a-8486cbdf64-dsdn2 1/1 Running 0 24d\rrook-ceph-mon-a-7758d4d54c-crq4s 1/1 Running 2 95d\rrook-ceph-mon-d-77db79f9b9-fcd5r 1/1 Running 0 41d\rrook-ceph-mon-e-7d44dcff6b-zjpfl 1/1 Running 0 22d\rrook-ceph-operator-66f7668857-sr8bw 1/1 Running 2 95d\rrook-ceph-osd-0-57b7d8b47b-k5ps8 1/1 Running 2 95d\rrook-ceph-osd-1-548c7bc54d-zsp8r 1/1 Running 1 95d\rrook-ceph-osd-10-7875d885d8-h2wdt 1/1 Running 0 22d\rrook-ceph-osd-11-5585fb7856-gxjfx 1/1 Running 2 95d\rrook-ceph-osd-12-fd5bcb8f8-z9v4c 1/1 Running 1 95d\rrook-ceph-osd-13-784c797d46-qmxj4 1/1 Running 0 22d\rrook-ceph-osd-14-6b689bfb4-sfffq 1/1 Running 2 95d\rrook-ceph-osd-15-64984bf7db-h99q2 1/1 Running 1 95d\rrook-ceph-osd-16-6f66f68868-ft8d8 1/1 Running 0 22d\rrook-ceph-osd-17-66fcdfc8c8-rg76t 1/1 Running 2 95d\rrook-ceph-osd-18-85f9d5567b-6jjph 1/1 Running 1 95d\rrook-ceph-osd-19-969b58fb-ztzxx 1/1 Running 0 22d\rrook-ceph-osd-2-ffc69957b-846mj 1/1 Running 2 95d\rrook-ceph-osd-20-5c86c5d556-26kkp 1/1 Running 0 22d\rrook-ceph-osd-3-79cb4b8f78-wxczm 1/1 Running 1 95d\rrook-ceph-osd-4-9587d6994-z94l2 1/1 Running 0 22d\rrook-ceph-osd-5-74cb556886-sqp6g 1/1 Running 2 95d\rrook-ceph-osd-6-5fb96bcb-2lgqr 1/1 Running 1 95d\rrook-ceph-osd-7-85f8659c9d-7z5tn 1/1 Running 0 22d\rrook-ceph-osd-8-6765676bfb-kjxr5 1/1 Running 2 95d\rrook-ceph-osd-9-67b4f98cdb-h9bd8 1/1 Running 1 95d\rrook-ceph-osd-prepare-node1-6x7dr 0/1 Completed 0 133m\rrook-ceph-osd-prepare-node2-z6jl8 0/1 Completed 0 133m\rrook-ceph-osd-prepare-node3-rvhth 0/1 Completed 0 133m\rrook-ceph-tools-6f58686b5d-znnsg 1/1 Running 0 24d\rrook-discover-2684s 1/1 Running 7 95d\rrook-discover-2nlkj 1/1 Running 1 95d\rrook-discover-4rhxm 1/1 Running 2 95d The output is long but i wanted to show that Rook actually created a OSD por for every device in each node, and i configured kubernetes to allow that on the master node either.\nWe can see that we now have a bunch of new resource definitions, enabling us to interact with Ceph in a declarative way, instead of recurring to the CLI to manage users, filesystems, pools and many other resources:\n$ kubectl get crd | grep \u0026#39;rook\\|objectbucket\u0026#39;\rcephblockpools.ceph.rook.io 2021-04-01T19:30:54Z\rcephclients.ceph.rook.io 2021-04-01T19:30:53Z\rcephclusters.ceph.rook.io 2021-04-01T19:30:53Z\rcephfilesystems.ceph.rook.io 2021-04-01T19:30:53Z\rcephnfses.ceph.rook.io 2021-04-01T19:30:53Z\rcephobjectrealms.ceph.rook.io 2021-04-01T19:30:54Z\rcephobjectstores.ceph.rook.io 2021-04-01T19:30:53Z\rcephobjectstoreusers.ceph.rook.io 2021-04-01T19:30:54Z\rcephobjectzonegroups.ceph.rook.io 2021-04-01T19:30:54Z\rcephobjectzones.ceph.rook.io 2021-04-01T19:30:54Z\rcephrbdmirrors.ceph.rook.io 2021-04-01T19:30:53Z\robjectbucketclaims.objectbucket.io 2021-04-01T19:30:54Z\robjectbuckets.objectbucket.io 2021-04-01T19:30:54Z\rvolumes.rook.io 2021-04-01T19:30:54Z From that point we can access the Ceph CLI by interacting with the rook-ceph-tools pod:\n$ kubectl exec -it -n rook-ceph rook-ceph-tools-6f58686b5d-znnsg -- ceph status\rcluster:\rid: 72e9c4a9-4315-45e0-ad43-cd79d22fb2be\rhealth: HEALTH_OK\rservices:\rmon: 3 daemons, quorum a,d,e (age 7d)\rmgr: a(active, since 3w)\rosd: 21 osds: 21 up (since 3w), 21 in (since 3w)\rrgw: 1 daemon active (my.store.a)\rtask status:\rdata:\rpools: 30 pools, 401 pgs\robjects: 2.12k objects, 2.4 GiB\rusage: 29 GiB used, 38 TiB / 38 TiB avail\rpgs: 401 active+clean\rio:\rclient: 7.0 KiB/s rd, 72 KiB/s wr, 6 op/s rd, 16 op/s wr Now we have two new StorageClasses to work with:\n$ kubectl get storageclasses\rNAME PROVISIONER RECLAIMPOLICY VOLUMEBINDINGMODE ALLOWVOLUMEEXPANSION AGE\rrook-ceph-block rook-ceph.rbd.csi.ceph.com Delete Immediate false 64d\rrook-ceph-bucket rook-ceph.ceph.rook.io/bucket Delete Immediate false 84d And then we provisioned some volumes to a few applications running on the cluster:\n$ kubectl get pv -A\rNAME CAPACITY ACCESS MODES RECLAIM POLICY STATUS CLAIM STORAGECLASS REASON AGE\rpvc-1c9151ae-3e9e-49ae-adbf-f365de4eb718 8Gi RWO Delete Bound cluster-spd/data-etcd-1 rook-ceph-block 18d\rpvc-39c5a513-1c50-48a9-9e4d-354ff84ea8b4 8Gi RWO Delete Bound cluster-spb/data-etcd-0 rook-ceph-block 24d\rpvc-53f2816a-e4c2-434d-8600-20206d3f6f75 8Gi RWO Delete Bound cluster-spc/data-etcd-0 rook-ceph-block 18d\rpvc-553c1a1b-0131-44a9-8a67-293dea40c161 5Gi RWO Delete Bound gitlab/redis-data-gitlab-redis-master-0 rook-ceph-block 56d\rpvc-6c38a9b7-8e23-4478-a431-34fd4f9ec158 8Gi RWO Delete Bound cluster-spd/data-etcd-2 rook-ceph-block 18d\rpvc-76bfab8e-6ae6-4b11-8223-ea9e97bbccf4 8Gi RWO Delete Bound cluster-spc/data-etcd-2 rook-ceph-block 18d\rpvc-836c1ff1-c92d-467c-b45b-b970824e2b04 8Gi RWO Delete Bound cluster-spc/data-etcd-1 rook-ceph-block 18d\rpvc-87e7bd8e-250e-4bd4-8268-3fb49597d0ab 10Gi RWO Delete Bound gitlab/gitlab-minio rook-ceph-block 39d\rpvc-bac3dc77-73ae-4800-821a-04faa15e627d 8Gi RWO Delete Bound cluster-spb/data-etcd-1 rook-ceph-block 24d\rpvc-ca087b82-038b-418a-a187-8e28617fbfae 8Gi RWO Delete Bound cluster-spd/data-etcd-0 rook-ceph-block 18d\rpvc-d255ca76-b62f-413b-82b8-184ff3cb0026 8Gi RWO Delete Bound cluster-spb/data-etcd-2 rook-ceph-block 24d\rpvc-d331d766-72d7-46c4-9cba-c0e8fea7a2b8 50Gi RWO Delete Bound gitlab/repo-data-gitlab-gitaly-0 rook-ceph-block 56d\rpvc-e76d375b-03b5-4bc0-8725-bc406cb7ee94 8Gi RWO Delete Bound gitlab/data-gitlab-postgresql-0 rook-ceph-block 56d This is how the pvc manifest looks like:\n$ kubectl get pvc -n gitlab gitlab-minio -o yaml\rapiVersion: v1\rkind: PersistentVolumeClaim\rmetadata:\rname: gitlab-minio\rnamespace: gitlab\rlabels:\rapp: minio\rspec:\rstorageClassName: rook-ceph-block\raccessModes:\r- ReadWriteOnce\rresources:\rrequests:\rstorage: 10Gi We can also provision Buckets using S3 via Rook. We used this to provide a backend for a Hashicorp Vault we have on the same environment:\nFirst we have to create the StorageClass:\napiVersion: storage.k8s.io/v1\rkind: StorageClass\rmetadata:\rname: rook-ceph-bucket\rprovisioner: rook-ceph.ceph.rook.io/bucket\rreclaimPolicy: Delete\rparameters:\robjectStoreName: my-store\robjectStoreNamespace: rook-ceph\rregion: us-east-1 Then we create a ObjectBucketClaim, which is a new resource type defined by the Rook CRD:\napiVersion: objectbucket.io/v1alpha1\rkind: ObjectBucketClaim\rmetadata:\rname: ceph-bucket\rnamespace: vault\rspec:\rgenerateBucketName: ceph-bucket\rstorageClassName: rook-ceph-bucket ",
    "ref": "/blog/rook/"
  },{
    "title": "Web scrapper using Python",
    "date": "",
    "description": "Scrapping FIIs using Python",
    "body": "So I needed to learn how to scrape a web page using Python.\nMy teammate suggested that I could learn a few tricks in python by scraping FIIs, which is the brazilian equivalent to american REITs. I did some research and found some good examples using a module called pandas (https://realpython.com/python-csv/) , a tool designed for data analisys and manipulation and very popular among people working with data science.\rMy goal was much less ambitious but i thought i might as well use what everyone else is using, since it would provide a good learning opportunity.\nI based my code on Renata Magner\u0026rsquo;s (https://github.com/RenataMagner/web_scraping_fii/blob/master/web_scraping-fiiv2.ipynb). I still have to implement error handling and many other improvements on the code, that\u0026rsquo;s just the first version. Without further ado, that\u0026rsquo;s what i came up with:\nfrom bs4 import BeautifulSoup\rimport requests\rimport pandas as pd\rurl = \u0026#39;https://www.fundsexplorer.com.br/ranking\u0026#39;\rhtml = requests.get(url).content\rsoup = BeautifulSoup(html, \u0026#39;html.parser\u0026#39;)\r# stores scraped data on a list\rresults = soup.find_all(\u0026#34;td\u0026#34;)\r# counts how many entries we got. each entry has 26 \u0026#39;td\u0026#39; lines each.\rfii_count=int(len(results)/26)\r# initialize the variables\rfii_info={}\rfii_list=[]\r\u0026#39;\u0026#39;\u0026#39;\rindex - field\r[0] - COD FUNDO\r[1] - SETOR\r[2] - PRECO_ATUAL\r[3] - LIQUIDEZ DIARIA\r[4] - DIVIDENDO\r[5] - dividend_yield\r[6] - dy_3m\r[7] - dy_6m\r[8] - dy_12m\r[9]- dy_3m_media\r[10] - dy_6m_media\r[11] - dy_12m_media\r[12] - dy_ano\r[13] - variacao_preco\r[14] - rentabilidade_periodo\r[15] - rentabilidade_acumulada\r[16] - patrimonio_liq\r[17] - vpa\r[18] - p_vpa\r\u0026#39;\u0026#39;\u0026#39;\r# runs through collected data and extracts the desided info\rfor fii in range(fii_count):\rfii_info[\u0026#39;codigo_fundo\u0026#39;]=results[fii*26].get_text()\rfii_info[\u0026#39;preco_atual\u0026#39;]=results[fii*26+2].get_text()\rfii_info[\u0026#39;setor\u0026#39;]=results[fii*26+1].get_text()\rfii_info[\u0026#39;p/vpa\u0026#39;]= results[fii*26+18].get_text()\rfii_info[\u0026#39;dividend_yield\u0026#39;]=results[fii*26+5].get_text()\rfii_info[\u0026#39;dividendo\u0026#39;]=results[fii*26+4].get_text()\rfii_info[\u0026#39;dy_12m_media\u0026#39;]=results[fii*26+11].get_text()\rfii_list.append(fii_info)\rfii_info={}\r# generates the CSV output\rfii_table = pd.DataFrame(data=fii_list)\rfii_table.to_csv(\u0026#39;fii_table.csv\u0026#39;) References:\nhttps://github.com/RenataMagner/web_scraping_fii/blob/master/web_scraping-fiiv2.ipynb\nhttps://realpython.com/python-csv/\nhttps://www.fundsexplorer.com.br/ranking\n",
    "ref": "/blog/python-web-scrapper-fii/"
  },{
    "title": "Comparsion of Sorting Algorithms using Python Decorators",
    "date": "",
    "description": "Measuring runtime of sorting algorithms using Python decorators",
    "body": "So I needed to learn how to use decorators in Python.\nI tried to come up with something within my current knowledge and since I was studying sorting algorithms, I decided to use decorators to measure how long each algorithm would take to complete and compare them. I know that it is kind of obvious which one is better in the proposed scenario for anyone with a Bachelor in Computer Science or any experienced developer, but the purpose here was to learn and develop my python skills.\rDecorators can be very useful when you need to add functionalities to an existing function/method/class, without having to change its code. Let\u0026rsquo;s say you need to add an additional check, time the function or log but you are using a module instead of writing your own function, or you want to reuse the code more efficiently, then using decorators might be the way to go.\nThere are many other ways to use decorators that i still have to explore, like chained decorators for instance.\nI found a good post at https://kleiber.me/blog/2017/08/10/tutorial-decorator-primer/ , where the author uses the same example I used (comparing sorting algorithms), but he used the pygorithm.sorting module, while I used my own functions.\nThere are many different ways to approach this, and we can always improve our older codes as we get better at a programming language. With that in mind, here\u0026rsquo;s the code i came up with, using Python 3:\nimport random\rimport functools\rimport time\r# define the function to measure time\rdef timeIt(func):\r# wraps the function using functools\r@functools.wraps(func)\rdef newfunc(*args, **kwargs):\r# check to enter the function only once\rif not hasattr(newfunc, \u0026#39;_entered\u0026#39;):\rnewfunc._entered = True\r# starts the measurement\rstartTime = time.time()\rfunc(*args, **kwargs)\r# finishes the measurement\relapsedTime = time.time() - startTime\r# prints the result\rprint(\u0026#39;function [{}] finished in {} ms\u0026#39;.format(\rfunc.__name__, int(elapsedTime * 1000)))\rdel newfunc._entered\rreturn newfunc\r# the @ inserts decorator\r@timeIt\rdef mergeSort(L):\rif len(L) \u0026gt; 1:\rmid = len(L) // 2\rleft = L[:mid]\rright = L[mid:]\rmergeSort(left)\rmergeSort(right)\ri = j = k = 0\rwhile i \u0026lt; len(left) and j \u0026lt; len(right):\rif left[i] \u0026lt; right[j]:\rL[k] = left[i]\ri += 1\relse:\rL[k] = right[j]\rj += 1\rk += 1\rwhile i \u0026lt; len(left):\rL[k] = left[i]\ri += 1\rk += 1\rwhile j \u0026lt; len(right):\rL[k] = right[j]\rj += 1\rk += 1\r@timeIt\rdef selectionSort(L):\rfor i in range(0, len(L)):\rmin_i = i\rfor right in range(i + 1, len(L)):\rif L[right] \u0026lt; L[min_i]:\rmin_i = right\rL[i], L[min_i] = L[min_i], L[i]\r@timeIt\rdef bubbleSort(L):\relem = len(L) - 1\rissorted = False\rwhile not issorted:\rissorted = True\rfor i in range(elem):\rif L[i] \u0026gt; L[i + 1]:\rL[i], L[i + 1] = L[i + 1], L[i]\rissorted = False\rrandomList = random.sample(range(5000), 5000)\rmergeSort(randomList.copy())\rselectionSort(randomList.copy())\rbubbleSort(randomList.copy()) And the results:\nfunction [mergeSort] finished in 2 ms\rfunction [selectionSort] finished in 930 ms\rfunction [bubbleSort] finished in 2828 ms ecco!\nReferences:\nhttps://docs.python.org/3/library/timeit.html\nhttps://stackoverflow.com/questions/5478351/python-time-measure-function\n",
    "ref": "/blog/python-sort-comparsion/"
  },{
    "title": "About",
    "date": "",
    "description": "More about me!",
    "body": "Soon\u0026hellip; ¯\\_(ツ)_/¯\n",
    "ref": "/about/"
  },{
    "title": "Ceph features and its relation to the client kernel version",
    "date": "",
    "description": "How the kernel version used on rbd/cephfs clients reflects on ceph features from the cluster perspective",
    "body": "While working on an upgrade on one of our ceph cluster from Luminous to Nautilus, i needed to come up with a way to detect any client with older versions, and check if we could break anything after the upgrade.\nI started checking the documentation as always, but all i found was a command called ceph features, which gives a summarized output:\n[root@mon-1 ~]# ceph features\r{\r\u0026#34;mon\u0026#34;: {\r\u0026#34;group\u0026#34;: {\r\u0026#34;features\u0026#34;: \u0026#34;0x3ffddff8eeacfffb\u0026#34;,\r\u0026#34;release\u0026#34;: \u0026#34;luminous\u0026#34;,\r\u0026#34;num\u0026#34;: 3\r}\r},\r\u0026#34;mds\u0026#34;: {\r\u0026#34;group\u0026#34;: {\r\u0026#34;features\u0026#34;: \u0026#34;0x3ffddff8eeacfffb\u0026#34;,\r\u0026#34;release\u0026#34;: \u0026#34;luminous\u0026#34;,\r\u0026#34;num\u0026#34;: 3\r}\r},\r\u0026#34;osd\u0026#34;: {\r\u0026#34;group\u0026#34;: {\r\u0026#34;features\u0026#34;: \u0026#34;0x3ffddff8eeacfffb\u0026#34;,\r\u0026#34;release\u0026#34;: \u0026#34;luminous\u0026#34;,\r\u0026#34;num\u0026#34;: 192\r}\r},\r\u0026#34;client\u0026#34;: {\r\u0026#34;group\u0026#34;: {\r\u0026#34;features\u0026#34;: \u0026#34;0x27018fb86aa42ada\u0026#34;,\r\u0026#34;release\u0026#34;: \u0026#34;jewel\u0026#34;,\r\u0026#34;num\u0026#34;: 422\r},\r\u0026#34;group\u0026#34;: {\r\u0026#34;features\u0026#34;: \u0026#34;0x2f018fb86aa42ada\u0026#34;,\r\u0026#34;release\u0026#34;: \u0026#34;luminous\u0026#34;,\r\u0026#34;num\u0026#34;: 95\r},\r\u0026#34;group\u0026#34;: {\r\u0026#34;features\u0026#34;: \u0026#34;0x3ffddff8eeacfffb\u0026#34;,\r\u0026#34;release\u0026#34;: \u0026#34;luminous\u0026#34;,\r\u0026#34;num\u0026#34;: 18\r}\r}\r} So that got me worried, since I was now looking at 422 clients apparently using jewel and we were already using Nautilus for a while. Since this specific cluster was \u0026ldquo;born\u0026rdquo; in jewel, I thought that it might be the case that many clients didn\u0026rsquo;t get any upgrades since.\nAnother way to see who\u0026rsquo;s connected to the cluster is the command ceph tell mds.\\hostname` client ls`, but it shows only cephfs clients, which solves only a part of the problem. At least we can see the client\u0026rsquo;s IP address (adresses and names omitted with [\u0026hellip;]):\n\u0026#34;inst\u0026#34;: \u0026#34;client.1400410 v1:[...]]:0/1769731892\u0026#34;,\r\u0026#34;completed_requests\u0026#34;: [],\r\u0026#34;prealloc_inos\u0026#34;: [],\r\u0026#34;used_inos\u0026#34;: [],\r\u0026#34;client_metadata\u0026#34;: {\r\u0026#34;features\u0026#34;: \u0026#34;0x00000000000001ff\u0026#34;,\r\u0026#34;entity_id\u0026#34;: [...],\r\u0026#34;hostname\u0026#34;: [...],\r\u0026#34;kernel_version\u0026#34;: \u0026#34;4.19.[...]\u0026#34;,\r\u0026#34;root\u0026#34;: [...]\r} Short note: there\u0026rsquo;s no documentation explaining those codes and its respective features, so I\u0026rsquo;m going to look at the source code and try to come up with a table. I\u0026rsquo;ll post it as soon as I manage to.\nSearching further i came across the command ceph daemon mon.hostname sessions:\n[root@mon-1 ~]# ceph daemon mon.`hostname` sessions | grep jewel\r\u0026#34;MonSession(client.354037 v1:[...]]:0/3173650400 is open allow profile rbd, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.394132 v1:[...]:0/295867623 is open allow profile rbd, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.785407 v1:[...]:0/507474248 is open allow profile rbd, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.367883 v1:[...]:0/3274665177 is open allow profile rbd, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.812187 v1:[...]:0/733157529 is open allow profile rbd, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.1390811 v1:[...]:0/1470215921 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.1400452 v1:[...]:0/3851374868 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;, Now i started to see some light at the end, since that command gave me the ip address and the version for each client connected. I knew that we didn\u0026rsquo;t have any clients using ceph-fuse, so it was safe to assume that everyone was using the kernel module to mount either RBD or cephfs. That cleared some confusion I had at the beginning between the ceph-common package version and the kernel version. It is not required to have that package installed in order to use the kernel module, so i then pointed my efforts at checking the clients\u0026rsquo; kernel versions.\nThe documentation also recommended some debugging at mon:\nThe ceph features command that reports the total number of clients and daemons and their features and releases. If the debugging level for Monitors is set to 10 (debug mon = 10), addresses and features of connecting and disconnecting clients are logged to log file on a local file system.\nSo i tried that and here\u0026rsquo;s what we get with debug mon = 10:\n2020-11-10 08:55:59.084 7f31c9015700 0 --1- [v2:[...]:3300/0,v1:[...]:6789/0] \u0026gt;\u0026gt; conn(0x561a94aed180 0x561a94ba5000 :6789 s=ACCE\rPTING pgs=0 cs=0 l=0).handle_client_banner accept peer addr is really - (socket is v1:[...]:40764/0)\r2020-11-10 08:55:59.085 7f31c500d700 10 mon.ceph-1@0(leader) e1 ms_handle_accept con 0x561a94aed180 no session\r2020-11-10 08:55:59.085 7f31c500d700 10 mon.ceph-1@0(leader) e1 _ms_dispatch new session 0x561a94adcd80 MonSession(unknown.0 - is open , featu\rres 0x27018fb86aa42ada (jewel)) features 0x27018fb86aa42ada\r2020-11-10 08:55:59.085 7f31c500d700 10 mon.ceph-1@0(leader).auth v3676 preprocess_query auth(proto 0 34 bytes epoch 0) from unknown.0 -\r2020-11-10 08:55:59.085 7f31c500d700 10 mon.ceph-1@0(leader).auth v3676 prep_auth() blob_size=34\r2020-11-10 08:55:59.085 7f31c500d700 10 mon.ceph-1@0(leader).auth v3676 _assign_global_id 34110 (max 44096)\r2020-11-10 08:55:59.085 7f31c500d700 2 mon.ceph-1@0(leader) e1 send_reply 0x561a958ba780 0x561a95246fc0 auth_reply(proto 2 0 (0) Success) v1\r2020-11-10 08:55:59.086 7f31c500d700 10 mon.ceph-1@0(leader).auth v3676 preprocess_query auth(proto 2 32 bytes epoch 0) from unknown.0 -\r2020-11-10 08:55:59.086 7f31c500d700 10 mon.ceph-1@0(leader).auth v3676 prep_auth() blob_size=32\r2020-11-10 08:55:59.086 7f31c500d700 10 mon.ceph-1@0(leader) e1 ms_handle_authentication session 0x561a94adcd80 con 0x561a94aed180 addr - MonSession(unknown.0 - is open , features 0x27018fb86aa42ada (jewel)) Without debug mon = 10, only the first line is logged.\nThat is very useful to detect the clients\u0026rsquo; features when they are connecting, but not so much when you can\u0026rsquo;t have the luxury to reset everyone\u0026rsquo;s connection. Besides, leaving that level of debugging enabled all the time would flag our node as an abuser at the log server in a matter of hours.\nWhat i knew already about our clients was that there was some elastic nodes using RBD, probably with CentOS 7 and consequently using kernel 3.x; Some other stuff also using RBD on either CentOS 7 or CentOS 8; and a kubernetes cluster using CoreOS and Flatcar with kernel 4.x. So after some checking, I compared the output from a client using kernel 4.19.x and another with 5.4.x:\n4.19.x:\n[root@mon-1 ~]# ceph daemon mon.`hostname` sessions | grep [...]\r\u0026#34;MonSession(client.95408384 [...]:0/923650579 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.95446387 [...]:0/421761626 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(client.95427342 [...]:0/1106672011 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/2823489235 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/4141488860 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/662892667 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/940509445 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/1147570690 is open allow r, features 0x27018fb86aa42ada (jewel))\u0026#34;, 5.4.x:\nroot@mon-1 ~]# ceph daemon mon.`hostname` sessions | grep [...]\r\u0026#34;MonSession(unknown.0 [...]:0/2258512824 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/4186418195 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/232634731 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(client.95587947 [...]:0/3963151684 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/1164059037 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/1228306108 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/2811111809 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/4254695077 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(client.95587926 [...]:0/479729343 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/340770437 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;,\r\u0026#34;MonSession(unknown.0 [...]:0/425381347 is open allow r, features 0x2f018fb86aa42ada (luminous))\u0026#34;, After that I could come with some conclusion. We\u0026rsquo;ll probably keep seeing jewel features for a long time, since CentOS/RHEL 8 and most of the main distros uses kernel 4.x on their latest LTS versions. I expected that at kernel 3.x i\u0026rsquo;d get Jewel features and from 4.x on we would get Luminous, but apparently the latest features are only available on kernels 5.x and beyond. I\u0026rsquo;m not sure if there is any feature that would be marked as nautilus or any newer ceph version, so I still need to dig deeper on that subject.\nReferences:\nhttps://ceph.io/community/new-luminous-upgrade-complete/\nhttps://docs.ceph.com/en/latest/rados/operations/upmap/#enabling\nhttps://docs.ceph.com/en/latest/man/8/ceph/#osd\nhttps://access.redhat.com/documentation/en-us/red_hat_ceph_storage/3.0/html/release_notes/major_updates\n",
    "ref": "/blog/ceph-features/"
  },{
    "title": "Obtaining a list of Ceph features from the hexadecimal value",
    "date": "",
    "description": "Simple python script that gets a hexadecimal value from the command 'ceph features' and outputs a list of the actual features.",
    "body": "After some digging i found the list of possible features, its respective kernel version requirement and/or when it became available.\nThis can be found in src/include/ceph_features.h, and I got it by cloning the ceph repo at git://github.com/ceph/ceph .\nThat information might be useful when you are trying to determine if your clients might need a kernel upgrade and what kind of RBD or cephfs features you can enable on your server side without breaking compatibility. It\u0026rsquo;s always ideal to have every new feature availabe whenever possible, but that is not always the case when you have a medium to large deployment, multiple clients with different workloads and scenarios - in other words, a Real World situation.\nimport sys\rfeature_list = [\r\u0026#34;( 0, 1, UID)\u0026#34;,\r\u0026#34;( 1, 1, NOSRCADDR) // 2.6.35 req\u0026#34;,\r\u0026#34;( 2, 3, SERVER_NAUTILUS)\u0026#34;,\r\u0026#34;( 3, 1, FLOCK) // 2.6.36\u0026#34;,\r\u0026#34;( 4, 1, SUBSCRIBE2) // 4.6 req\u0026#34;,\r\u0026#34;( 5, 1, MONNAMES)\u0026#34;,\r\u0026#34;( 6, 1, RECONNECT_SEQ) // 3.10 req\u0026#34;,\r\u0026#34;( 7, 1, DIRLAYOUTHASH) // 2.6.38\u0026#34;,\r\u0026#34;( 8, 1, OBJECTLOCATOR)\u0026#34;,\r\u0026#34;( 9, 1, PGID64) // 3.9 req\u0026#34;,\r\u0026#34;(10, 1, INCSUBOSDMAP)\u0026#34;,\r\u0026#34;(11, 1, PGPOOL3) // 3.9 req\u0026#34;,\r\u0026#34;(12, 1, OSDREPLYMUX)\u0026#34;,\r\u0026#34;(13, 1, OSDENC) // 3.9 req\u0026#34;,\r\u0026#34;(14, 2, SERVER_KRAKEN)\u0026#34;,\r\u0026#34;(15, 1, MONENC)\u0026#34;,\r\u0026#34;(16, 3, SERVER_OCTOPUS) | (16, 3, OSD_REPOP_MLCOD)\u0026#34;,\r\u0026#34;(17, 3, OS_PERF_STAT_NS)\u0026#34;,\r\u0026#34;(18, 1, CRUSH_TUNABLES) // 3.6\u0026#34;,\r\u0026#34;(19, 2, OSD_PGLOG_HARDLIMIT)\u0026#34;,\r\u0026#34;(20, 3, SERVER_PACIFIC)\u0026#34;,\r\u0026#34;(21, 2, SERVER_LUMINOUS) // 4.13 | (21, 2, RESEND_ON_SPLIT) | (21, 2, RADOS_BACKOFF) | (21, 2, OSDMAP_PG_UPMAP) | (21, 2, CRUSH_CHOOSE_ARGS)\u0026#34;,\r\u0026#34;(22, 2, OSD_FIXED_COLLECTION_LIST)\u0026#34;,\r\u0026#34;(23, 1, MSG_AUTH) // 3.19 req (unless nocephx_require_signatures)\u0026#34;,\r\u0026#34;(24, 2, RECOVERY_RESERVATION_2)\u0026#34;,\r\u0026#34;(25, 1, CRUSH_TUNABLES2) // 3.9\u0026#34;,\r\u0026#34;(26, 1, CREATEPOOLID)\u0026#34;,\r\u0026#34;(27, 1, REPLY_CREATE_INODE) // 3.9\u0026#34;,\r\u0026#34;(28, 2, SERVER_MIMIC)\u0026#34;,\r\u0026#34;(29, 1, MDSENC) // 4.7\u0026#34;,\r\u0026#34;(30, 1, OSDHASHPSPOOL) // 3.9\u0026#34;,\r\u0026#34;DEPRECATED(31, 1, MON_SINGLE_PAXOS, NAUTILUS)\u0026#34;,\r\u0026#34;(32, 3, STRETCH_MODE)\u0026#34;,\r\u0026#34;RETIRED(33, 1, MON_SCRUB, JEWEL, LUMINOUS)\u0026#34;,\r\u0026#34;RETIRED(34, 1, OSD_PACKED_RECOVERY, JEWEL, LUMINOUS)\u0026#34;,\r\u0026#34;(35, 1, OSD_CACHEPOOL) // 3.14\u0026#34;,\r\u0026#34;(36, 1, CRUSH_V2) // 3.14\u0026#34;,\r\u0026#34;(37, 1, EXPORT_PEER) // 3.14\u0026#34;,\r\u0026#34;RETIRED(38, 1, OSD_ERASURE_CODES, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;(39, 1, OSDMAP_ENC) // 3.15\u0026#34;,\r\u0026#34;(40, 1, MDS_INLINE_DATA) // 3.19\u0026#34;,\r\u0026#34;(41, 1, CRUSH_TUNABLES3) // 3.15 | (41, 1, OSD_PRIMARY_AFFINITY)\u0026#34;,\r\u0026#34;(42, 1, MSGR_KEEPALIVE2) // 4.3 (for consistency)\u0026#34;,\r\u0026#34;(43, 1, OSD_POOLRESEND) // 4.13\u0026#34;,\r\u0026#34;RETIRED(44, 1, ERASURE_CODE_PLUGINS_V2, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;RETIRED(45, 1, OSD_SET_ALLOC_HINT, JEWEL, LUMINOUS)\u0026#34;,\r\u0026#34;(46, 1, OSD_FADVISE_FLAGS)\u0026#34;,\r\u0026#34;(47, 1, MDS_QUOTA) // 4.17\u0026#34;,\r\u0026#34;(48, 1, CRUSH_V4) // 4.1\u0026#34;,\r\u0026#34;RETIRED(49, 1, OSD_MIN_SIZE_RECOVERY, JEWEL, LUMINOUS)\u0026#34;,\r\u0026#34;RETIRED(50, 1, MON_METADATA, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;RETIRED(51, 1, OSD_BITWISE_HOBJ_SORT, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;RETIRED(52, 1, OSD_PROXY_WRITE_FEATURES, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;RETIRED(53, 1, ERASURE_CODE_PLUGINS_V3, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;RETIRED(54, 1, OSD_HITSET_GMT, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;RETIRED(55, 1, HAMMER_0_94_4, MIMIC, OCTOPUS)\u0026#34;,\r\u0026#34;(56, 1, NEW_OSDOP_ENCODING) // 4.13 (for pg_pool_t \u0026gt;= v25)\u0026#34;,\r\u0026#34;(57, 1, MON_STATEFUL_SUB) // 4.13 | (57, 1, SERVER_JEWEL)\u0026#34;,\r\u0026#34;(58, 1, CRUSH_TUNABLES5) // 4.5 | (58, 1, NEW_OSDOPREPLY_ENCODING) | (58, 1, FS_FILE_LAYOUT_V2)\u0026#34;,\r\u0026#34;(59, 1, FS_BTIME) | (59, 1, FS_CHANGE_ATTR) | (59, 1, MSG_ADDR2)\u0026#34;,\r\u0026#34;(60, 1, OSD_RECOVERY_DELETES) // *do not share this bit*\u0026#34;,\r\u0026#34;(61, 1, CEPHX_V2) // 4.19, *do not share this bit*\u0026#34;,\r\u0026#34;(62, 1, RESERVED) // do not use; used as a sentinel\u0026#34;,\r\u0026#34;DEPRECATED(63, 1, RESERVED_BROKEN, LUMINOUS) // client-facing\u0026#34;\r]\rdef settolist(featureset):\r\u0026#39;\u0026#39;\u0026#39;Converts a featureset hex to a feature list.\rParameters:\rint:featureset\rReturns:\rlist:featureset_list\r\u0026#39;\u0026#39;\u0026#39;\rfeatureset_hex = featureset\rfeatureset_list = []\rfeatureset_bin = bin(int(featureset_hex, 16))[2:].zfill(64)\rcount = 0\rfor bit in (featureset_bin):\rif bit == \u0026#39;1\u0026#39;:\rfeatureset_list.append(feature_list[count])\rcount += 1\rreturn featureset_list\routput = settolist(str(sys.argv[1]))\rprint(\u0026#34;\\n\u0026#34;.join(output)) A test run using an entry from my test cluster:\nMonSession(client.95280473 [IP]:0/110518927 is open allow profile rbd, features 0x27018fb86aa42ada (jewel))\u0026quot;\npython features.py 0x27018fb86aa42ada\r( 2, 3, SERVER_NAUTILUS)\r( 5, 1, MONNAMES)\r( 6, 1, RECONNECT_SEQ) // 3.10 req\r( 7, 1, DIRLAYOUTHASH) // 2.6.38\r(15, 1, MONENC)\r(16, 3, SERVER_OCTOPUS) | (16, 3, OSD_REPOP_MLCOD)\r(20, 3, SERVER_PACIFIC)\r(21, 2, SERVER_LUMINOUS) // 4.13 | (21, 2, RESEND_ON_SPLIT) | (21, 2, RADOS_BACKOFF) | (21, 2, OSDMAP_PG_UPMAP) | (21, 2, CRUSH_CHOOSE_ARGS)\r(22, 2, OSD_FIXED_COLLECTION_LIST)\r(23, 1, MSG_AUTH) // 3.19 req (unless nocephx_require_signatures)\r(24, 2, RECOVERY_RESERVATION_2)\r(26, 1, CREATEPOOLID)\r(27, 1, REPLY_CREATE_INODE) // 3.9\r(28, 2, SERVER_MIMIC)\rRETIRED(33, 1, MON_SCRUB, JEWEL, LUMINOUS)\rRETIRED(34, 1, OSD_PACKED_RECOVERY, JEWEL, LUMINOUS)\r(36, 1, CRUSH_V2) // 3.14\rRETIRED(38, 1, OSD_ERASURE_CODES, MIMIC, OCTOPUS)\r(40, 1, MDS_INLINE_DATA) // 3.19\r(42, 1, MSGR_KEEPALIVE2) // 4.3 (for consistency)\rRETIRED(45, 1, OSD_SET_ALLOC_HINT, JEWEL, LUMINOUS)\rRETIRED(50, 1, MON_METADATA, MIMIC, OCTOPUS)\rRETIRED(52, 1, OSD_PROXY_WRITE_FEATURES, MIMIC, OCTOPUS)\rRETIRED(54, 1, OSD_HITSET_GMT, MIMIC, OCTOPUS)\r(56, 1, NEW_OSDOP_ENCODING) // 4.13 (for pg_pool_t \u0026gt;= v25)\r(57, 1, MON_STATEFUL_SUB) // 4.13 | (57, 1, SERVER_JEWEL)\r(59, 1, FS_BTIME) | (59, 1, FS_CHANGE_ATTR) | (59, 1, MSG_ADDR2)\r(60, 1, OSD_RECOVERY_DELETES) // *do not share this bit*\r(62, 1, RESERVED) // do not use; used as a sentinel ",
    "ref": "/blog/ceph-features-2/"
  },{
    "title": "Contact",
    "date": "",
    "description": "",
    "body": "",
    "ref": "/contact/"
  }]
